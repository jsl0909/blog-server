// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  nickname  String?
  avatar    String?
  bio       String?
  roleId    Int      @default(4)
  status    UserStatus @default(ACTIVE)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  role      Role     @relation(fields: [roleId], references: [id])
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  logs      OperationLog[]

  @@map("users")
}

// 角色表
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

// 权限表
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  resource    String
  action      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  roles       RolePermission[]

  @@map("permissions")
}

// 角色权限关联表
model RolePermission {
  roleId       Int
  permissionId Int
  createdAt    DateTime @default(now())

  // 关联关系
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// 文章表
model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.LongText
  summary     String?  @db.Text
  coverImage  String?
  status      PostStatus @default(DRAFT)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  authorId    Int
  categoryId  Int?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  author      User      @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        PostTag[]
  comments    Comment[]
  likes       Like[]

  @@index([status, publishedAt])
  @@index([authorId])
  @@index([categoryId])
  @@map("posts")
}

// 分类表
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  parentId    Int?
  sort        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  posts       Post[]

  @@map("categories")
}

// 标签表
model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  posts     PostTag[]

  @@map("tags")
}

// 文章标签关联表
model PostTag {
  postId    Int
  tagId     Int
  createdAt DateTime @default(now())

  // 关联关系
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

// 评论表
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  postId    Int
  authorId  Int
  parentId  Int?
  status    CommentStatus @default(APPROVED)
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

// 点赞表
model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  // 关联关系
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

// 操作日志表
model OperationLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String
  resource    String
  resourceId  Int?
  ipAddress   String?
  userAgent   String?
  details     String?  @db.Text
  createdAt   DateTime @default(now())

  // 关联关系
  user        User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("operation_logs")
}

// 系统配置表
model SystemConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// 枚举类型
enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
} 