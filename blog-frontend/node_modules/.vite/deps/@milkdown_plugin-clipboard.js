import {
  $prose
} from "./chunk-26DJ723H.js";
import {
  DOMParser,
  DOMSerializer,
  Plugin,
  PluginKey,
  TextSelection,
  editorViewOptionsCtx,
  getNodeFromSchema,
  isTextOnlySlice,
  parserCtx,
  schemaCtx,
  serializerCtx
} from "./chunk-RMA7BMCH.js";
import "./chunk-DWA4UIM3.js";

// ../node_modules/@milkdown/plugin-clipboard/lib/index.js
function isPureText(content) {
  if (!content) return false;
  if (Array.isArray(content)) {
    if (content.length > 1) return false;
    return isPureText(content[0]);
  }
  const child = content.content;
  if (child) return isPureText(child);
  return content.type === "text";
}
var clipboard = $prose((ctx) => {
  const schema = ctx.get(schemaCtx);
  ctx.update(editorViewOptionsCtx, (prev) => ({
    ...prev,
    editable: prev.editable ?? (() => true)
  }));
  const key = new PluginKey("MILKDOWN_CLIPBOARD");
  const plugin = new Plugin({
    key,
    props: {
      handlePaste: (view, event) => {
        var _a, _b;
        const parser = ctx.get(parserCtx);
        const editable = (_b = (_a = view.props).editable) == null ? void 0 : _b.call(_a, view.state);
        const { clipboardData } = event;
        if (!editable || !clipboardData) return false;
        const currentNode = view.state.selection.$from.node();
        if (currentNode.type.spec.code) return false;
        const text = clipboardData.getData("text/plain");
        const vscodeData = clipboardData.getData("vscode-editor-data");
        if (vscodeData) {
          const data = JSON.parse(vscodeData);
          const language = data == null ? void 0 : data.mode;
          if (text && language) {
            const { tr } = view.state;
            const codeBlock = getNodeFromSchema("code_block", schema);
            tr.replaceSelectionWith(codeBlock.create({ language })).setSelection(
              TextSelection.near(
                tr.doc.resolve(Math.max(0, tr.selection.from - 2))
              )
            ).insertText(text.replace(/\r\n?/g, "\n"));
            view.dispatch(tr);
            return true;
          }
        }
        const html = clipboardData.getData("text/html");
        if (html.length === 0 && text.length === 0) return false;
        const domParser = DOMParser.fromSchema(schema);
        let dom;
        if (html.length === 0) {
          const slice2 = parser(text);
          if (!slice2 || typeof slice2 === "string") return false;
          dom = DOMSerializer.fromSchema(schema).serializeFragment(
            slice2.content
          );
        } else {
          const template = document.createElement("template");
          template.innerHTML = html;
          dom = template.content.cloneNode(true);
          template.remove();
        }
        const slice = domParser.parseSlice(dom);
        const node = isTextOnlySlice(slice);
        if (node) {
          view.dispatch(view.state.tr.replaceSelectionWith(node, true));
          return true;
        }
        view.dispatch(view.state.tr.replaceSelection(slice));
        return true;
      },
      clipboardTextSerializer: (slice) => {
        const serializer = ctx.get(serializerCtx);
        const isText = isPureText(slice.content.toJSON());
        if (isText)
          return slice.content.textBetween(
            0,
            slice.content.size,
            "\n\n"
          );
        const doc = schema.topNodeType.createAndFill(void 0, slice.content);
        if (!doc) return "";
        const value = serializer(doc);
        return value;
      }
    }
  });
  return plugin;
});
clipboard.meta = {
  displayName: "Prose<clipboard>",
  package: "@milkdown/plugin-clipboard"
};
export {
  clipboard
};
//# sourceMappingURL=@milkdown_plugin-clipboard.js.map
