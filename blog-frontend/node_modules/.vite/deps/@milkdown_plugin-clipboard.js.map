{
  "version": 3,
  "sources": ["../../../../node_modules/@milkdown/plugin-clipboard/src/index.ts"],
  "sourcesContent": ["import type { Node } from '@milkdown/prose/model'\n\nimport {\n  editorViewOptionsCtx,\n  parserCtx,\n  schemaCtx,\n  serializerCtx,\n} from '@milkdown/core'\nimport { getNodeFromSchema, isTextOnlySlice } from '@milkdown/prose'\nimport { DOMParser, DOMSerializer } from '@milkdown/prose/model'\nimport { Plugin, PluginKey, TextSelection } from '@milkdown/prose/state'\nimport { $prose } from '@milkdown/utils'\n\ntype UnknownRecord = Record<string, unknown>\nfunction isPureText(\n  content: UnknownRecord | UnknownRecord[] | undefined | null\n): boolean {\n  if (!content) return false\n  if (Array.isArray(content)) {\n    if (content.length > 1) return false\n    return isPureText(content[0])\n  }\n\n  const child = content.content\n  if (child) return isPureText(child as UnknownRecord[])\n\n  return content.type === 'text'\n}\n\n/// The prosemirror plugin for clipboard.\nexport const clipboard = $prose((ctx) => {\n  const schema = ctx.get(schemaCtx)\n\n  // Set editable props for https://github.com/Milkdown/milkdown/issues/190\n  ctx.update(editorViewOptionsCtx, (prev) => ({\n    ...prev,\n    editable: prev.editable ?? (() => true),\n  }))\n\n  const key = new PluginKey('MILKDOWN_CLIPBOARD')\n  const plugin = new Plugin({\n    key,\n    props: {\n      handlePaste: (view, event) => {\n        const parser = ctx.get(parserCtx)\n        const editable = view.props.editable?.(view.state)\n        const { clipboardData } = event\n        if (!editable || !clipboardData) return false\n\n        const currentNode = view.state.selection.$from.node()\n        if (currentNode.type.spec.code) return false\n\n        const text = clipboardData.getData('text/plain')\n\n        // if is copied from vscode, try to create a code block\n        const vscodeData = clipboardData.getData('vscode-editor-data')\n        if (vscodeData) {\n          const data = JSON.parse(vscodeData)\n          const language = data?.mode\n          if (text && language) {\n            const { tr } = view.state\n            const codeBlock = getNodeFromSchema('code_block', schema)\n\n            tr.replaceSelectionWith(codeBlock.create({ language }))\n              .setSelection(\n                TextSelection.near(\n                  tr.doc.resolve(Math.max(0, tr.selection.from - 2))\n                )\n              )\n              .insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            view.dispatch(tr)\n            return true\n          }\n        }\n\n        const html = clipboardData.getData('text/html')\n        if (html.length === 0 && text.length === 0) return false\n\n        const domParser = DOMParser.fromSchema(schema)\n        let dom\n        if (html.length === 0) {\n          const slice = parser(text)\n          if (!slice || typeof slice === 'string') return false\n\n          dom = DOMSerializer.fromSchema(schema).serializeFragment(\n            slice.content\n          )\n        } else {\n          const template = document.createElement('template')\n          template.innerHTML = html\n          dom = template.content.cloneNode(true)\n          template.remove()\n        }\n\n        const slice = domParser.parseSlice(dom)\n        const node = isTextOnlySlice(slice)\n        if (node) {\n          view.dispatch(view.state.tr.replaceSelectionWith(node, true))\n          return true\n        }\n\n        view.dispatch(view.state.tr.replaceSelection(slice))\n        return true\n      },\n      clipboardTextSerializer: (slice) => {\n        const serializer = ctx.get(serializerCtx)\n        const isText = isPureText(slice.content.toJSON())\n        if (isText)\n          return (slice.content as unknown as Node).textBetween(\n            0,\n            slice.content.size,\n            '\\n\\n'\n          )\n\n        const doc = schema.topNodeType.createAndFill(undefined, slice.content)\n        if (!doc) return ''\n        const value = serializer(doc)\n        return value\n      },\n    },\n  })\n\n  return plugin\n})\n\nclipboard.meta = {\n  displayName: 'Prose<clipboard>',\n  package: '@milkdown/plugin-clipboard',\n}\n"],
  "mappings": "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",
  "names": ["slice"]
}
